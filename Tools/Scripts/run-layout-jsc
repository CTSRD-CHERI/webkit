#! /bin/sh

# Copyright (C) 2012 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 

# Script to run selected LayoutTests/{js,fast/regex} tests using jsc

jscCmd="/System/Library/Frameworks/JavaScriptCore.framework/Resources/jsc"
testRoot=/tmp/LayoutTests
resultsRoot=`date \+/tmp/results-%Y-%m-%d-%H-%M-%S`

cmdName=`basename $0`

usage()
{
    echo "usage: $cmdName [[--jsc | -j] <path-to-jsc>] [[--results-dir | -r] <results-path>]"
    echo "                    [[--test-root | -t] <test-root-path>] [[--filter-list | -f] <filter-list>]"
    echo "                    [[--timeout | -l] <timeout>] [[--junit-xml | -x] <xml-file-path>]"
    echo "                    [--num-shards <N> --run-shard <N>]"
    exit 1
}

while [ $# -gt 1 ]
do
    case $1 in
    --jsc|-j)
        jscCmd="$2"
        ;;
    --results-dir|-r)
        resultsRoot=$2
        ;;
    --test-root|-t)
        testRoot=$2
        ;;
    --filter-list|-f)
        filterList=$2
        ;;
    --skip-first|-s)
        skipFirst=$2
        ;;
    --timeout|-l)
        timeout=$2
        ;;
    --junit-xml|-x)
        junitXML=$2
        ;;
    --num-shards)
        numShards=$2
        ;;
    --run-shard)
        runShard=$2
        ;;
    *)
        echo "Unrecognized option \"$1\""
        usage
        ;;
    esac

    shift 2
done

if [ $# -gt 0 ]
then
    echo "Extra argument \"$1\""
    usage
fi

# Sanity check on shard arguments
if [ -z "$numShards" -o -z "$runShard" ]
then
    if [ "$numShards" != "$runShard" ]
    then
        echo "Must specify --num-shards and --run-shard together"
        usage
    fi
fi

# Update junit XML filename if using sharding. Add shard number after filename
# in the format filename.$runShard
if [ -n $junitXML -a -n $numShards ]
then
    junitXML="$junitXML.$runShard"
fi

preScript=$testRoot/resources/standalone-pre.js
postScript=$testRoot/resources/standalone-post.js
passList=$resultsRoot/passed
failList=$resultsRoot/failed
crashList=$resultsRoot/crashed
timeoutList=$resultsRoot/timedout

numTestsRun=0
numPassed=0
numFailed=0
numCrashed=0
numTimedout=0
numSkipped=0

rm -rf $resultsRoot
rm -f jsc-tests-passed jsc-tests-failed

if [ ! -z $junitXML ]
then
  echo "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>" > $junitXML
  echo "<testsuites>" >> $junitXML
  echo "<testsuite>" >> $junitXML
fi

#for testHTMLFile in `(cd $testRoot && ls -1 js/*.html fast/regex/*.html)`
for testHTMLFile in `(cd $testRoot && ls -1 fast/regex/*.html)`
do
    testPassed=0
    testCrashed=0
    testTimeout=0
    testName=`basename $testHTMLFile .html`
    dirName=`dirname $testHTMLFile`
    test=$dirName/$testName
     
    if [ ! -z "$filterList" ]
    then
        grep -x $test $filterList
        if [ $? -eq 1 ]
        then
            numSkipped=$(($numSkipped+1))
            echo "Skipping $testName"
            continue
        fi
    fi

    expectedOut="$testRoot/$dirName/${testName}-expected.txt"
    actualOut="$resultsRoot/$dirName/${testName}-out.txt"
    actualErr="$resultsRoot/$dirName/${testName}-err.txt"
    diffOut="$resultsRoot/$dirName/${testName}-diff.txt"
    jsTest="$testRoot/$dirName/script-tests/${testName}.js"

    if [ ! -d "$resultsRoot/$dirName" ]
    then
        mkdir -p "$resultsRoot/$dirName"
    fi

    if [ -f $jsTest ]
    then
        numTestsRun=$(($numTestsRun+1))
        
        if [ ! -z $skipFirst ]
        then
            if [ $numTestsRun -le $skipFirst ]
            then
                numSkipped=$(($numSkipped+1))
                echo "Skipping $testName"
                continue
            fi
        fi

        if [ -n $numShards ]
        then
            # Check if we should be running this test in this shard
            # i.e. if: ($numTestsRun % $numShards) == ($runShard % $numShards)
            # Assumes that test and shard numbering starts from 1
            if [ "`expr $numTestsRun % $numShards`" != "`expr $runShard % $numShards`" ]
            then
                echo "Skipping $testName (run in a different shard)"
                continue
            fi
        fi

        if [ -z $junitXML ]; then
            echo -e "\e[1;36m${numTestsRun} Testing $test ... \e[0;37m\c"
        fi
        if [ -z "$timeout" ]
        then
            echo "$jscCmd $preScript $jsTest $postScript 2>$actualErr > $actualOut"
        else
            echo "timeout $timeout $jscCmd $preScript $jsTest $postScript 2>$actualErr > $actualOut"
        fi
        START=$(date +%s)
        if [ -z "$timeout" ]
        then
            $jscCmd $preScript $jsTest $postScript 2>$actualErr > $actualOut
        else
            timeout $timeout $jscCmd $preScript $jsTest $postScript 2>$actualErr > $actualOut
        fi
        JSC_RES=$?
        END=$(date +%s)
        DIFF=$(expr $END - $START)
        
        if [ ! -z $junitXML ]; then
            echo "<testcase classname=\"$test\" name=\"$test\" time=\"$DIFF\">" >> $junitXML
        fi
        if [ $JSC_RES -eq 0 ]
        then
            diff $actualOut $expectedOut > $diffOut
            if [ $? -eq 0 ]
            then
                testPassed=1
                echo -e "\e[1;32mPASSED\e[0;37m"
            else
                testPassed=0
                if [ ! -z $junitXML ]; then
                    echo "<failure>FAILED</failure>" >> $junitXML
                else
                    echo -e "\e[1;31mFAILED\e[0;37m"
                fi
            fi
        else
            testPassed=0
            if [ $JSC_RES -gt 128 ]
            then
                testCrashed=1
                if [ ! -z $junitXML ]; then
                    echo "<failure>CRASHED</failure>" >> $junitXML
                else
                    echo -e "\e[1;31mCRASHED\e[0;37m"
                fi
            elif [ $JSC_RES -eq 124 ]
            then
                testTimeout=1
                if [ ! -z $junitXML ]; then
                    echo "<failure>TIMEOUT</failure>" >> $junitXML
                else
                    echo -e "\e[1;31mTIMEOUT\e[0;37m"
                fi
            else
                if [ ! -z $junitXML ]; then
                    echo "<failure>ERROR: $JSC_RES</failure>" >> $junitXML
                else
                    echo -e "\e[1;31mERROR: $JSC_RES\e[0;37m"
                fi
            fi
        fi

        if [ $testPassed -eq 1 ]
        then
            echo "$test" >> $passList
            numPassed=$(($numPassed+1))
        else
            echo "$test" >> $failList
            numFailed=$(($numFailed+1))
            if [ $testCrashed -eq 1 ]
            then
                echo "$test" >> $crashList
                numCrashed=$(($numCrashed+1))
            fi
            if [ $testTimeout -eq 1 ]
            then
                echo "$test" >> $timeoutList
                numTimedout=$(($numTimedout+1))
            fi
        fi
        echo -e "\e[1;33m >> Took: $DIFF seconds, Status: $numPassed passed, $numFailed failed, $numCrashed crashed, $numTimedout timed out, $numSkipped skipped.\e[0;37m"
        if [ ! -z $junitXML ]; then
            echo "</testcase>" >> $junitXML
        fi
    fi
done

if [ ! -z $junitXML ]
then
  echo "</testsuite>" >> $junitXML
  echo "</testsuites>" >> $junitXML
fi

if [ $numSkipped -gt 0 ]
then
    numTestsRun=$(($numTestsRun-$numSkipped))
fi

if [ $numPassed -eq $numTestsRun ]
then
    echo "All $numTestsRun tests passed!" | tee $resultsRoot/summary
else
    echo "$numPassed tests passed, $numFailed tests failed, $numCrashed tests crashed, $numTimedout tests timed out, $numSkipped skipped." | tee $resultsRoot/summary
fi

echo "Test results in $resultsRoot"
